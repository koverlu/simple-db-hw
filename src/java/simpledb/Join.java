package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    JoinPredicate m_predicate;
    OpIterator m_child1;
    OpIterator m_child2;
    OpIterator[] m_children;
    Tuple m_curT1;
    Tuple m_curT2;
    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        m_predicate = p;
        m_child1 = child1;
        m_child2 = child2;
        m_children = null;
        m_curT1 = null;
        m_curT2 = null;
    }

    public JoinPredicate getJoinPredicate() {
        return m_predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return m_child1.getTupleDesc().getFieldName(m_predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return m_child2.getTupleDesc().getFieldName(m_predicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(m_child1.getTupleDesc(), m_child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        m_child1.open();
        m_child2.open();
    }

    public void close() {
        super.close();
        m_child1.close();
        m_child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        m_child1.rewind();
        m_child2.rewind();
        m_curT1 = null;
        m_curT2 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if(m_curT1 == null) {
    		if (m_child1.hasNext()) {
            	m_curT1 = m_child1.next();
    		}
            else
            	return null;
    	}        

    	// nested loop
        do {
        	if(m_child2.hasNext()) {
        		m_curT2 = m_child2.next();
        	}        		
        	else {
        		if(m_child1.hasNext()) {
        			m_curT1 = m_child1.next();
        			m_child2.rewind();
        			m_curT2 = m_child2.next();
        		}
        		else
        			return null;
        	}        	            	
		} while (!m_predicate.filter(m_curT1, m_curT2));
        
        //join
    	Tuple ret_tuple = new Tuple(getTupleDesc());
    	int filedNum = 0;
    	for (int i = 0; i < m_curT1.getTupleDesc().numFields(); i++) {
    		ret_tuple.setField(filedNum, m_curT1.getField(i));
    		filedNum++;
    	}
    	for (int i = 0; i < m_curT2.getTupleDesc().numFields(); i++) {
    		ret_tuple.setField(filedNum, m_curT2.getField(i));
    		filedNum++;
    	}
    	System.out.printf("%s\n", ret_tuple.toString());
        return ret_tuple;
    }

    @Override
    public OpIterator[] getChildren() {
        return m_children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
    	m_children = children;
    }

}
